{"ast":null,"code":"var _jsxFileName = \"/Users/manas/Desktop/Scrapy/seo/src/components/ScrapeBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../ScrapeBar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ScrapeBar({\n  updateScrapedData\n}) {\n  _s();\n  const [url, setUrl] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const handleClearClick = () => {\n    setUrl(\"\");\n    updateScrapedData(null);\n  };\n  const handleOnChange = event => {\n    setUrl(event.target.value);\n  };\n  const handleScrapeClick = async () => {\n    try {\n      setLoading(true);\n      // const response = await fetch('http://localhost:3001/scrape', {\n      const response = await fetch('https://4bbe-43-252-34-223.ngrok-free.app/scrape', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        updateScrapedData(data);\n      } else {\n        console.error('Scrape Failed:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error during Scrape:', error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center my-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control me-3\",\n        type: \"Analyze\",\n        placeholder: \"Enter the URL\",\n        \"aria-label\": \"Analyze\",\n        value: url,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-analyze\",\n        onClick: handleScrapeClick,\n        disabled: loading,\n        children: loading ? 'Analyzing...' : 'Analyze'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-clear\",\n        onClick: handleClearClick,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n// import React, { useState } from 'react';\n// import '../ScrapeBar.css'\n\n// export default function ScrapeBar({ updateScrapedData }) {\n//   const [url, setUrl] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n\n//   const handleClearClick = () => {\n//     setUrl(\"\")\n//     updateScrapedData(null);\n//   };\n\n//   const handleOnChange = (event) => {\n//     setUrl(event.target.value);\n//   };\n\n//   const handleScrapeClick = async () => {\n//     try {\n//       setLoading(true);\n//       const encodedUrl = encodeURIComponent(url);\n//             const response = await fetch(`http://localhost:3001/scrape?url=${encodedUrl}`, {\n\n//       // const response = await fetch(`https://5b88-43-252-34-223.ngrok-free.app/scrape?url=${encodedUrl}`, {\n//         method: 'GET', // Changed to GET\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         updateScrapedData(data);\n//       } else {\n//         console.error('Scrape Failed:', response.statusText);\n//       }\n//     } catch (error) {\n//       console.error('Error during Scrape:', error.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <div className='d-flex justify-content-center my-3'>\n//         <input\n//           className=\"form-control me-3\"\n\n//           type=\"Analyze\"\n//           placeholder=\"Enter the URL\"\n//           aria-label=\"Analyze\"\n//           value={url}\n//           onChange={handleOnChange}\n//         />\n//         <button className=\"btn btn-analyze\" onClick={handleScrapeClick} disabled={loading}>\n//           {loading ? 'Analyzing...' : 'Analyze'}\n//         </button>\n//         <button className=\"btn-clear\" onClick={handleClearClick}>Clear</button>\n\n//       </div>\n\n//     </>\n//   );\n// }\n_s(ScrapeBar, \"PAg79S6JG8tqXfPyHbENFu5L7LU=\");\n_c = ScrapeBar;\nvar _c;\n$RefreshReg$(_c, \"ScrapeBar\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ScrapeBar","updateScrapedData","_s","url","setUrl","loading","setLoading","handleClearClick","handleOnChange","event","target","value","handleScrapeClick","response","fetch","method","headers","body","JSON","stringify","ok","data","json","console","error","statusText","message","children","className","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/manas/Desktop/Scrapy/seo/src/components/ScrapeBar.js"],"sourcesContent":["\r\n\r\nimport React, { useState } from 'react';\r\nimport '../ScrapeBar.css'\r\n\r\n\r\nexport default function ScrapeBar({ updateScrapedData }) {\r\n  const [url, setUrl] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleClearClick = () => {\r\n    setUrl(\"\")\r\n    updateScrapedData(null);\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setUrl(event.target.value);\r\n  };\r\n\r\n  \r\n\r\n  const handleScrapeClick = async () => {\r\n    try {\r\n      setLoading(true);\r\n      // const response = await fetch('http://localhost:3001/scrape', {\r\n      const response = await fetch('https://4bbe-43-252-34-223.ngrok-free.app/scrape', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ url }),\r\n      });\r\n\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        updateScrapedData(data);\r\n      } else {\r\n        console.error('Scrape Failed:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during Scrape:', error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className='d-flex justify-content-center my-3'>\r\n        <input\r\n          className=\"form-control me-3\"\r\n\r\n          type=\"Analyze\"\r\n          placeholder=\"Enter the URL\"\r\n          aria-label=\"Analyze\"\r\n          value={url}\r\n          onChange={handleOnChange}\r\n        />\r\n        <button className=\"btn btn-analyze\" onClick={handleScrapeClick} disabled={loading}>\r\n          {loading ? 'Analyzing...' : 'Analyze'}\r\n        </button>\r\n        <button className=\"btn-clear\" onClick={handleClearClick}>Clear</button>\r\n\r\n      </div>\r\n      \r\n      \r\n    </>\r\n  );\r\n}\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import '../ScrapeBar.css'\r\n\r\n\r\n// export default function ScrapeBar({ updateScrapedData }) {\r\n//   const [url, setUrl] = useState(\"\");\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const handleClearClick = () => {\r\n//     setUrl(\"\")\r\n//     updateScrapedData(null);\r\n//   };\r\n\r\n//   const handleOnChange = (event) => {\r\n//     setUrl(event.target.value);\r\n//   };\r\n\r\n  \r\n\r\n\r\n//   const handleScrapeClick = async () => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const encodedUrl = encodeURIComponent(url);\r\n//             const response = await fetch(`http://localhost:3001/scrape?url=${encodedUrl}`, {\r\n\r\n//       // const response = await fetch(`https://5b88-43-252-34-223.ngrok-free.app/scrape?url=${encodedUrl}`, {\r\n//         method: 'GET', // Changed to GET\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         updateScrapedData(data);\r\n//       } else {\r\n//         console.error('Scrape Failed:', response.statusText);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error during Scrape:', error.message);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n\r\n//   return (\r\n//     <>\r\n//       <div className='d-flex justify-content-center my-3'>\r\n//         <input\r\n//           className=\"form-control me-3\"\r\n\r\n//           type=\"Analyze\"\r\n//           placeholder=\"Enter the URL\"\r\n//           aria-label=\"Analyze\"\r\n//           value={url}\r\n//           onChange={handleOnChange}\r\n//         />\r\n//         <button className=\"btn btn-analyze\" onClick={handleScrapeClick} disabled={loading}>\r\n//           {loading ? 'Analyzing...' : 'Analyze'}\r\n//         </button>\r\n//         <button className=\"btn-clear\" onClick={handleClearClick}>Clear</button>\r\n\r\n//       </div>\r\n      \r\n      \r\n//     </>\r\n//   );\r\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}